class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int n = envelopes.length;
        int len = 0;
        int[] dp = new int[n];
        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        List<Integer> list = new ArrayList<>();
        list.add(envelopes[0][1]);
        int x=0;
         for(int i=1;i<n;i++){
        if(envelopes[i][1]>list.get(list.size()-1)){
          list.add(envelopes[i][1]);
          }
          else{
            x = binarySearch(list, envelopes[i][1]);
            list.set(x, envelopes[i][1]);
           
          }
        }
      return list.size();
    }
  
    public int binarySearch(List<Integer> list, int val){
     int l = 0;
     int r = list.size()-1;
     int ans = 0;
     while(l<=r){
       int mid = (l+r)/2;
       if(list.get(mid)==val)return mid;
       
       if(list.get(mid)<val){
         l = mid+1;
       }
       else if(list.get(mid)>val){
         ans = mid;
         r=mid-1;
       }
     }
     return ans;
   }
}