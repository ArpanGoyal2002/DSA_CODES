import java.io.*;
import java.util.*;

public class Main {

    public static class Pair {
        int i;
        int j;
        String psf;

        public Pair(String psf, int i, int j) {
            this.i = i;
            this.j = j;
            this.psf = psf;
        }
    }

    public static void perfectSum(int arr[], int n, int sum) {
        int mod = 1000000007;
        n = sum;
        int m = arr.length;
        int chk = 0;
        int dp[][] = new int[m + 1][n + 1];
        for (int i = 0; i < m + 1; i++) {
            for (int j = 0; j < n + 1; j++) {

                if (i == 0 && j > 0) {
                    dp[i][j] = 0;
                    continue;
                }
                if (j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                int score = arr[i - 1];
                if (score == 0) {
                    dp[i][j] = dp[i - 1][j];
                    continue;
                }
                int wscore = 0; // if we dont have score
                if (j - score >= 0) {
                    wscore = dp[i - 1][j - score];
                }
                int ascore = dp[i - 1][j]; // if we dont include score
                dp[i][j] = (wscore % mod + ascore % mod) % mod;
            }
        }
        for (int i : arr) {
            if (i == 0)
                chk++;
        }
        int mul = 1;
        for (int k = 0; k < chk; k++) {
            mul = (mul * 2) % mod;
        }
        if (dp[m][n] > 0) {
            System.out.println("true");
            print(dp, arr, m, n);
        } else {
            System.out.println("false");
        }
    }

    public static void print(int[][] dp, int[] arr, int row, int col) {
        ArrayDeque<Pair> q = new ArrayDeque<>();
        q.add(new Pair("", row, col));
        while (q.size() > 0) {
            Pair tmp = q.remove();
            int i = tmp.i, j = tmp.j;
            if (j == 0 || i == 0) {
                System.out.println(tmp.psf);
                continue;
            }
            if (dp[i - 1][j] > 0) {
                q.add(new Pair(tmp.psf, i - 1, j));
            }
            if (i - 1 >= 0 && j - arr[i - 1] >= 0 && dp[i - 1][j - arr[i - 1]] > 0) {
                q.add(new Pair((i - 1) + " " + tmp.psf, i - 1, j - arr[i - 1]));
            }
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(br.readLine());
        }

        int tar = Integer.parseInt(br.readLine());

        perfectSum(arr, n, tar);

    }
}
